"""gemeinde gebiet and more

Revision ID: c6a6ead0e783
Revises: 5d551e6067e2
Create Date: 2025-07-23 10:37:44.513214

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from fastapi_users_db_sqlalchemy.generics import GUID


# revision identifiers, used by Alembic.
revision: str = "c6a6ead0e783"
down_revision: Union[str, None] = "5d551e6067e2"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "klimacheck_auswirkung_dauer",
        sa.Column(
            "id",
            sa.Integer(),
            nullable=False,
            comment="ID der Auswirkungsdauer für den Klimacheck",
        ),
        sa.Column(
            "name", sa.String(), nullable=False, comment="Titel der Auswirkungsdauer"
        ),
        sa.Column(
            "alt_name",
            sa.String(),
            nullable=True,
            comment="Optionaler alternativer Name der Auswirkungsdauer",
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_klimacheck_auswirkung_dauer_id"),
        "klimacheck_auswirkung_dauer",
        ["id"],
        unique=True,
    )
    op.create_table(
        "klimacheck_klimarelevanz",
        sa.Column(
            "id",
            sa.Integer(),
            nullable=False,
            comment="ID der Klimarelevanz für den Klimacheck",
        ),
        sa.Column(
            "name", sa.String(), nullable=False, comment="Name der Klimarelevanz"
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_klimacheck_klimarelevanz_id"),
        "klimacheck_klimarelevanz",
        ["id"],
        unique=True,
    )
    op.create_table(
        "mobilitaetscheck_auswirkung_raeumlich",
        sa.Column(
            "id",
            sa.Integer(),
            nullable=False,
            comment="ID der räumlichen Auswirkung für den Mobilitätscheck",
        ),
        sa.Column(
            "name",
            sa.String(),
            nullable=False,
            comment="Titel der räumlichen Auswirkung",
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_mobilitaetscheck_auswirkung_raeumlich_id"),
        "mobilitaetscheck_auswirkung_raeumlich",
        ["id"],
        unique=True,
    )
    op.create_table(
        "gemeinde_gebiet",
        sa.Column("id", sa.Integer(), nullable=False, comment="Gemeindegebiet ID"),
        sa.Column(
            "name", sa.String(), nullable=False, comment="Name des Gemeindegebiets"
        ),
        sa.Column(
            "gemeinde_id",
            sa.Integer(),
            nullable=False,
            comment="Gemeinde ID mit der das Gebiet verknüpft ist",
        ),
        sa.ForeignKeyConstraint(["gemeinde_id"], ["gemeinde.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_gemeinde_gebiet_id"), "gemeinde_gebiet", ["id"], unique=True
    )
    op.create_table(
        "mobilitaetscheckEingabe_gemeindeGebiet",
        sa.Column("gemeinde_gebiet_id", sa.Integer(), nullable=True),
        sa.Column("mobilitaetscheck_eingabe_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["gemeinde_gebiet_id"], ["gemeinde_gebiet.id"], ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(
            ["mobilitaetscheck_eingabe_id"],
            ["mobilitaetscheck_eingabe.id"],
            ondelete="CASCADE",
        ),
    )
    op.create_table(
        "mobilitaetscheckEingabe_user",
        sa.Column("user_id", GUID, nullable=True),
        sa.Column("mobilitaetscheck_eingabe_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["mobilitaetscheck_eingabe_id"],
            ["mobilitaetscheck_eingabe.id"],
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(["user_id"], ["user.id"], ondelete="CASCADE"),
    )
    op.add_column(
        "indikator",
        sa.Column(
            "gemeindespezifisch",
            sa.Boolean(),
            nullable=False,
            server_default=sa.text("false"),
            comment="Gibt an, ob der Indikator mit anderen Gemeinden geteilt wird oder gemeindespezifisch ist",
        ),
    )
    op.add_column(
        "textblock",
        sa.Column(
            "gemeindespezifisch",
            sa.Boolean(),
            nullable=False,
            server_default=sa.text("false"),
            comment="Gibt an, ob der Textblock mit anderen Gemeinden geteilt wird oder gemeindespezifisch ist",
        ),
    )
    op.add_column(
        "klimacheck_eingabe",
        sa.Column(
            "klimarelevanz_id",
            sa.Integer(),
            nullable=True,
            comment="Einschätzung der Klimarelevanz des Projekts (z.B. hoch, mittel, niedrig).",
        ),
    )
    op.add_column(
        "klimacheck_eingabe",
        sa.Column(
            "auswirkung_dauer_id",
            sa.Integer(),
            nullable=True,
            comment="Kurzbeschreibung der Dauer der Auswirkungen",
        ),
    )
    op.create_foreign_key(
        None,
        "klimacheck_eingabe",
        "klimacheck_klimarelevanz",
        ["klimarelevanz_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.create_foreign_key(
        None,
        "klimacheck_eingabe",
        "klimacheck_auswirkung_dauer",
        ["auswirkung_dauer_id"],
        ["id"],
        ondelete="CASCADE",
    )

    conn = op.get_bind()

    # Insert klimacheck_auswirkung_dauer
    conn.execute(
        sa.text(
            """
        INSERT INTO klimacheck_auswirkung_dauer (name, alt_name) VALUES
        ('kurzfristig', '< 1 Jahr'),
        ('mittelfristig', '1-5 Jahre'),
        ('langfristig', '> 5 Jahre')
    """
        )
    )

    # Insert klimacheck_klimarelevanz
    conn.execute(
        sa.text(
            """
        INSERT INTO klimacheck_klimarelevanz (name) VALUES
        ('positiv'),
        ('negativ'),
        ('keine Auswirkung')
    """
        )
    )

    # Map old string values to new foreign key IDs using subqueries
    # klimacheck: auswirkung_dauer
    conn.execute(
        sa.text(
            """
        UPDATE klimacheck_eingabe
        SET auswirkung_dauer_id = (
            SELECT id FROM klimacheck_auswirkung_dauer
            WHERE
                (auswirkung_dauer = 'short'     AND name = 'kurzfristig') OR
                (auswirkung_dauer = 'medium'    AND name = 'mittelfristig') OR
                (auswirkung_dauer = 'long'      AND name = 'langfristig')
            LIMIT 1
        )
    """
        )
    )

    # klimacheck: klimarelevanz
    conn.execute(
        sa.text(
            """
        UPDATE klimacheck_eingabe
        SET klimarelevanz_id = (
            SELECT id FROM klimacheck_klimarelevanz
            WHERE
                (klimarelevanz = 'positive'     AND name = 'positiv') OR
                (klimarelevanz = 'negative'     AND name = 'negativ') OR
                (klimarelevanz = 'no_effect'    AND name = 'keine Auswirkung')
            LIMIT 1
        )
    """
        )
    )
    op.alter_column(
        "klimacheck_eingabe",
        "klimarelevanz_id",
        existing_type=sa.INTEGER(),
        nullable=False,
    )

    op.drop_column("klimacheck_eingabe", "klimarelevanz")
    op.drop_column("klimacheck_eingabe", "auswirkung_dauer")
    op.add_column(
        "mobilitaetscheck_eingabe_ziel_unter",
        sa.Column(
            "auswirkung_raeumlich_id",
            sa.Integer(),
            nullable=True,
            comment="Räumliche Auswirkung des Unterziels",
        ),
    )
    op.create_foreign_key(
        None,
        "mobilitaetscheck_eingabe_ziel_unter",
        "mobilitaetscheck_auswirkung_raeumlich",
        ["auswirkung_raeumlich_id"],
        ["id"],
        ondelete="CASCADE",
    )

    # Insert mobilitaetscheck_auswirkung_raeumlich
    conn.execute(
        sa.text(
            """
        INSERT INTO mobilitaetscheck_auswirkung_raeumlich (name) VALUES
        ('lokal'),
        ('quartiersweit'),
        ('stadtweit')
    """
        )
    )

    # mobilitaetscheck: auswirkung_raeumlich
    conn.execute(
        sa.text(
            """
        UPDATE mobilitaetscheck_eingabe_ziel_unter
        SET auswirkung_raeumlich_id = (
            SELECT id FROM mobilitaetscheck_auswirkung_raeumlich
            WHERE
                (auswirkung_raeumlich = 'locally'      AND name = 'lokal') OR
                (auswirkung_raeumlich = 'districtwide' AND name = 'quartiersweit') OR
                (auswirkung_raeumlich = 'citywide'     AND name = 'stadtweit')
            LIMIT 1
        )
    """
        )
    )
    op.drop_column("mobilitaetscheck_eingabe_ziel_unter", "auswirkung_raeumlich")
    op.add_column(
        "tag",
        sa.Column(
            "gemeindespezifisch",
            sa.Boolean(),
            nullable=False,
            server_default=sa.text("false"),
            comment="Gibt an, ob der Tag mit anderen Gemeinden geteilt wird oder geteilt wird",
        ),
    )
    op.alter_column(
        "user",
        "rolle_id",
        existing_type=sa.INTEGER(),
        comment="Gemeinde ID, mit der der Benutzer verknüpft ist",
        existing_comment="Rolle ID des Benutzers",
        existing_nullable=False,
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "user",
        "rolle_id",
        existing_type=sa.INTEGER(),
        comment="Rolle ID des Benutzers",
        existing_comment="Gemeinde ID, mit der der Benutzer verknüpft ist",
        existing_nullable=False,
    )
    op.drop_column("tag", "gemeindespezifisch")
    op.add_column(
        "mobilitaetscheck_eingabe_ziel_unter",
        sa.Column(
            "auswirkung_raeumlich",
            sa.VARCHAR(),
            autoincrement=False,
            nullable=True,
            comment="Räumliche Auswirkung des Unterziels",
        ),
    )
    conn = op.get_bind()
    conn.execute(
        sa.text(
            """
        UPDATE mobilitaetscheck_eingabe_ziel_unter
        SET auswirkung_raeumlich = (
            SELECT CASE name
                WHEN 'lokal' THEN 'locally'
                WHEN 'quartiersweit' THEN 'districtwide'
                WHEN 'stadtweit' THEN 'citywide'
                ELSE NULL END
            FROM mobilitaetscheck_auswirkung_raeumlich
            WHERE mobilitaetscheck_auswirkung_raeumlich.id = mobilitaetscheck_eingabe_ziel_unter.auswirkung_raeumlich_id
        )
    """
        )
    )

    op.drop_constraint(None, "mobilitaetscheck_eingabe_ziel_unter", type_="foreignkey")
    op.drop_column("mobilitaetscheck_eingabe_ziel_unter", "auswirkung_raeumlich_id")
    op.add_column(
        "klimacheck_eingabe",
        sa.Column(
            "auswirkung_dauer",
            sa.VARCHAR(),
            autoincrement=False,
            nullable=True,
            comment="Kurzbeschreibung der Dauer der Auswirkungen",
        ),
    )
    op.add_column(
        "klimacheck_eingabe",
        sa.Column(
            "klimarelevanz",
            sa.VARCHAR(),
            autoincrement=False,
            nullable=False,
            comment="Einschätzung der Klimarelevanz des Projekts (z.B. hoch, mittel, niedrig).",
        ),
    )
    conn.execute(
        sa.text(
            """
        UPDATE klimacheck_eingabe
        SET auswirkung_dauer = (
            SELECT CASE name
                WHEN 'kurzfristig' THEN 'short'
                WHEN 'mittelfristig' THEN 'medium'
                WHEN 'langfristig' THEN 'long'
                ELSE NULL END
            FROM klimacheck_auswirkung_dauer
            WHERE klimacheck_auswirkung_dauer.id = klimacheck_eingabe.auswirkung_dauer_id
        )
    """
        )
    )

    conn.execute(
        sa.text(
            """
        UPDATE klimacheck_eingabe
        SET klimarelevanz = (
            SELECT CASE name
                WHEN 'positiv' THEN 'positive'
                WHEN 'negativ' THEN 'negative'
                WHEN 'keine Auswirkung' THEN 'no_effect'
                ELSE NULL END
            FROM klimacheck_klimarelevanz
            WHERE klimacheck_klimarelevanz.id = klimacheck_eingabe.klimarelevanz_id
        )
    """
        )
    )

    op.drop_constraint(None, "klimacheck_eingabe", type_="foreignkey")
    op.drop_constraint(None, "klimacheck_eingabe", type_="foreignkey")
    op.drop_column("klimacheck_eingabe", "auswirkung_dauer_id")
    op.drop_column("klimacheck_eingabe", "klimarelevanz_id")
    op.drop_column("indikator", "gemeindespezifisch")
    op.drop_column("textblock", "gemeindespezifisch")
    op.drop_table("mobilitaetscheckEingabe_user")
    op.drop_table("mobilitaetscheckEingabe_gemeindeGebiet")
    op.drop_index(op.f("ix_gemeinde_gebiet_id"), table_name="gemeinde_gebiet")
    op.drop_table("gemeinde_gebiet")
    op.drop_index(
        op.f("ix_mobilitaetscheck_auswirkung_raeumlich_id"),
        table_name="mobilitaetscheck_auswirkung_raeumlich",
    )
    op.drop_table("mobilitaetscheck_auswirkung_raeumlich")
    op.drop_index(
        op.f("ix_klimacheck_klimarelevanz_id"), table_name="klimacheck_klimarelevanz"
    )
    op.drop_table("klimacheck_klimarelevanz")
    op.drop_index(
        op.f("ix_klimacheck_auswirkung_dauer_id"),
        table_name="klimacheck_auswirkung_dauer",
    )
    op.drop_table("klimacheck_auswirkung_dauer")
    # ### end Alembic commands ###
