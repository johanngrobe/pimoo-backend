"""add magistratsvorlage

Revision ID: 1f5cbc86b396
Revises: c6a6ead0e783
Create Date: 2025-07-24 11:22:02.103507

"""

from typing import Sequence, Union

from alembic import op
from datetime import datetime
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = "1f5cbc86b396"
down_revision: Union[str, None] = "c6a6ead0e783"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "magistratsvorlage",
        sa.Column(
            "id", sa.Integer(), nullable=False, comment="ID der Magistratsvorlage"
        ),
        sa.Column(
            "verwaltungsvorgang_nr",
            sa.String(),
            nullable=False,
            unique=True,
            comment="Verwaltungsvorgangsnummer",
        ),
        sa.Column(
            "verwaltungsvorgang_datum",
            sa.Date(),
            nullable=False,
            comment="Datum des Verwaltungsvorgangs",
        ),
        sa.Column(
            "name",
            sa.String(),
            nullable=False,
            comment="Name oder Titel der Mobilitätschecks",
        ),
        sa.Column(
            "beschreibung",
            sa.String(),
            nullable=True,
            comment="Beschreibung der Mobilitätschecks",
        ),
        sa.Column(
            "erstellt_am",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
            comment="Zeitpunkt der Erstellung",
        ),
        sa.Column(
            "veroeffentlicht",
            sa.Boolean(),
            nullable=False,
            comment="Gibt an, ob die Magistratsvorlage veröffentlicht wurde",
        ),
        sa.Column(
            "gemeinde_id",
            sa.Integer(),
            nullable=False,
            comment="Gemeinde ID, mit der die Mobilitätscheck-Eingabe verknüpft ist",
        ),
        sa.ForeignKeyConstraint(["gemeinde_id"], ["gemeinde.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_magistratsvorlage_id"), "magistratsvorlage", ["id"], unique=True
    )
    op.create_table(
        "magistratsvorlage_gemeindeGebiet",
        sa.Column("gemeinde_gebiet_id", sa.Integer(), nullable=True),
        sa.Column("magistratsvorlage_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["gemeinde_gebiet_id"], ["gemeinde_gebiet.id"], ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(
            ["magistratsvorlage_id"], ["magistratsvorlage.id"], ondelete="CASCADE"
        ),
    )
    op.drop_table("mobilitaetscheckEingabe_gemeindeGebiet")
    op.add_column(
        "klimacheck_eingabe",
        sa.Column(
            "magistratsvorlage_id",
            sa.Integer(),
            nullable=True,
            comment="ID der zugehörigen Magistratsvorlage",
        ),
    )
    op.create_foreign_key(
        None,
        "klimacheck_eingabe",
        "magistratsvorlage",
        ["magistratsvorlage_id"],
        ["id"],
        ondelete="SET NULL",
    )
    op.add_column(
        "mobilitaetscheck_eingabe",
        sa.Column(
            "magistratsvorlage_id",
            sa.Integer(),
            nullable=True,
            comment="ID der zugehörigen Magistratsvorlage",
        ),
    )
    op.create_foreign_key(
        None,
        "mobilitaetscheck_eingabe",
        "magistratsvorlage",
        ["magistratsvorlage_id"],
        ["id"],
        ondelete="SET NULL",
    )

    conn = op.get_bind()

    # 1. Collect all unique verwaltungsvorgang_nr from both tables
    result = conn.execute(
        sa.text(
            """
        SELECT DISTINCT
            verwaltungsvorgang_nr,
            verwaltungsvorgang_datum,
            name,
            beschreibung,
            gemeinde_id
        FROM (
            SELECT
                verwaltungsvorgang_nr,
                verwaltungsvorgang_datum,
                name,
                beschreibung,
                gemeinde_id
            FROM mobilitaetscheck_eingabe
            WHERE verwaltungsvorgang_nr IS NOT NULL

            UNION

            SELECT
                verwaltungsvorgang_nr,
                verwaltungsvorgang_datum,
                name,
                NULL AS beschreibung,
                gemeinde_id
            FROM klimacheck_eingabe
            WHERE verwaltungsvorgang_nr IS NOT NULL
        ) sub
    """
        )
    ).mappings()

    # Create a mapping from verwaltungsvorgang_nr -> one representative row
    unique_rows = {}

    for row in result:
        nr = row["verwaltungsvorgang_nr"]
        if nr not in unique_rows:
            unique_rows[nr] = row  # just take the first one
        # else: duplicate with same nr — skip/ignore

    # Now insert exactly one row per verwaltungsvorgang_nr
    mapping = {}

    for nr, row in unique_rows.items():
        inserted = conn.execute(
            sa.text(
                """
                INSERT INTO magistratsvorlage (
                    verwaltungsvorgang_nr,
                    verwaltungsvorgang_datum,
                    name,
                    beschreibung,
                    gemeinde_id,
                    veroeffentlicht,
                    erstellt_am
                ) VALUES (:nr, :datum, :name, :beschreibung, :gemeinde_id, false, now())
                RETURNING id
                """
            ),
            {
                "nr": nr,
                "datum": row["verwaltungsvorgang_datum"],
                "name": row["name"],
                "beschreibung": row["beschreibung"],
                "gemeinde_id": row["gemeinde_id"],
            },
        )
        new_id = inserted.scalar_one()
        mapping[nr] = new_id

    # 3. Update both source tables to reference new magistratsvorlage.id
    for verwaltungsvorgang_nr, mag_id in mapping.items():
        conn.execute(
            sa.text(
                """
                UPDATE mobilitaetscheck_eingabe
                SET magistratsvorlage_id = :mag_id
                WHERE verwaltungsvorgang_nr = :nr
            """
            ),
            {"mag_id": mag_id, "nr": verwaltungsvorgang_nr},
        )
        conn.execute(
            sa.text(
                """
                UPDATE klimacheck_eingabe
                SET magistratsvorlage_id = :mag_id
                WHERE verwaltungsvorgang_nr = :nr
            """
            ),
            {"mag_id": mag_id, "nr": verwaltungsvorgang_nr},
        )

    op.drop_column("mobilitaetscheck_eingabe", "verwaltungsvorgang_nr")
    op.drop_column("klimacheck_eingabe", "verwaltungsvorgang_nr")
    op.drop_column("mobilitaetscheck_eingabe", "verwaltungsvorgang_datum")
    op.drop_column("klimacheck_eingabe", "verwaltungsvorgang_datum")
    op.drop_column("mobilitaetscheck_eingabe", "name")
    op.drop_column("klimacheck_eingabe", "name")
    op.drop_column("mobilitaetscheck_eingabe", "beschreibung")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "klimacheck_eingabe",
        sa.Column(
            "verwaltungsvorgang_nr",
            sa.String(),
            nullable=True,
            comment="Verwaltungsvorgangsnummer",
        ),
    )
    op.add_column(
        "mobilitaetscheck_eingabe",
        sa.Column(
            "verwaltungsvorgang_nr",
            sa.String(),
            nullable=True,
            comment="Verwaltungsvorgangsnummer",
        ),
    )
    op.add_column(
        "klimacheck_eingabe",
        sa.Column(
            "verwaltungsvorgang_datum",
            sa.Date(),
            nullable=True,
            comment="Datum des Verwaltungsvorgangs",
        ),
    )
    op.add_column(
        "mobilitaetscheck_eingabe",
        sa.Column(
            "verwaltungsvorgang_datum",
            sa.Date(),
            nullable=True,
            comment="Datum des Verwaltungsvorgangs",
        ),
    )
    op.add_column(
        "klimacheck_eingabe",
        sa.Column(
            "name",
            sa.String(),
            nullable=True,
            comment="Name oder Titel der Mobilitätschecks",
        ),
    )
    op.add_column(
        "mobilitaetscheck_eingabe",
        sa.Column(
            "name",
            sa.String(),
            nullable=True,
            comment="Name oder Titel der Mobilitätschecks",
        ),
    )
    op.add_column(
        "mobilitaetscheck_eingabe",
        sa.Column(
            "beschreibung",
            sa.String(),
            nullable=True,
            comment="Beschreibung der Mobilitätschecks",
        ),
    )
    conn = op.get_bind()

    # 2. Restore values from magistratsvorlage
    conn.execute(
        sa.text(
            """
        UPDATE mobilitaetscheck_eingabe AS m
        SET
            verwaltungsvorgang_nr = v.verwaltungsvorgang_nr,
            verwaltungsvorgang_datum = v.verwaltungsvorgang_datum,
            name = v.name,
            beschreibung = v.beschreibung
        FROM magistratsvorlage v
        WHERE m.magistratsvorlage_id = v.id
    """
        )
    )

    conn.execute(
        sa.text(
            """
        UPDATE klimacheck_eingabe AS k
        SET
            verwaltungsvorgang_nr = v.verwaltungsvorgang_nr,
            verwaltungsvorgang_datum = v.verwaltungsvorgang_datum,
            name = v.name
        FROM magistratsvorlage v
        WHERE k.magistratsvorlage_id = v.id
    """
        )
    )

    op.drop_constraint(None, "mobilitaetscheck_eingabe", type_="foreignkey")
    op.drop_column("mobilitaetscheck_eingabe", "magistratsvorlage_id")
    op.drop_constraint(None, "klimacheck_eingabe", type_="foreignkey")
    op.drop_column("klimacheck_eingabe", "magistratsvorlage_id")
    op.create_table(
        "mobilitaetscheckEingabe_gemeindeGebiet",
        sa.Column(
            "gemeinde_gebiet_id", sa.INTEGER(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "mobilitaetscheck_eingabe_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["gemeinde_gebiet_id"],
            ["gemeinde_gebiet.id"],
            name="mobilitaetscheckEingabe_gemeindeGebiet_gemeinde_gebiet_id_fkey",
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["mobilitaetscheck_eingabe_id"],
            ["mobilitaetscheck_eingabe.id"],
            name="mobilitaetscheckEingabe_gemein_mobilitaetscheck_eingabe_id_fkey",
            ondelete="CASCADE",
        ),
    )
    op.drop_table("magistratsvorlage_gemeindeGebiet")
    op.drop_index(op.f("ix_magistratsvorlage_id"), table_name="magistratsvorlage")
    op.drop_table("magistratsvorlage")
    # ### end Alembic commands ###
