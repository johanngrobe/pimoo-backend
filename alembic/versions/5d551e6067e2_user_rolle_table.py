"""user rolle table

Revision ID: 5d551e6067e2
Revises: c32c9e65cb91
Create Date: 2025-07-16 16:38:14.470352

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = "5d551e6067e2"
down_revision: Union[str, None] = "c32c9e65cb91"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "user_rolle",
        sa.Column("id", sa.Integer(), nullable=False, comment="User Rolle ID"),
        sa.Column(
            "name", sa.String(), nullable=False, comment="Name der Benutzerrolle"
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_user_rolle_id"), "user_rolle", ["id"], unique=True)

    op.add_column(
        "user",
        sa.Column(
            "rolle_id", sa.Integer(), nullable=True, comment="Rolle ID des Benutzers"
        ),
    )
    op.create_foreign_key(
        None, "user", "user_rolle", ["rolle_id"], ["id"], ondelete="SET NULL"
    )
    conn = op.get_bind()
    conn.execute(
        sa.text("INSERT INTO user_rolle (name) VALUES (:name)").bindparams(
            name="Verwaltung"
        )
    )
    conn.execute(
        sa.text("INSERT INTO user_rolle (name) VALUES (:name)").bindparams(
            name="Politik"
        )
    )

    verwaltung_id = conn.execute(
        sa.text("SELECT id FROM user_rolle WHERE name='Verwaltung'")
    ).scalar()
    politik_id = conn.execute(
        sa.text("SELECT id FROM user_rolle WHERE name='Politik'")
    ).scalar()

    conn.execute(
        sa.text(
            """
            UPDATE "user"
            SET rolle_id = :verwaltung_id
            WHERE rolle IN ('Verwaltung', 'administration')
        """
        ),
        {"verwaltung_id": verwaltung_id},
    )

    #   - handle politik / politician
    conn.execute(
        sa.text(
            """
            UPDATE "user"
            SET rolle_id = :politik_id
            WHERE rolle IN ('Politik', 'politician')
        """
        ),
        {"politik_id": politik_id},
    )

    op.drop_column("user", "rolle")
    op.alter_column("user", "rolle_id", nullable=False)

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Re-add the old rolle column (string)
    op.add_column(
        "user",
        sa.Column("rolle", sa.VARCHAR(), nullable=True, comment="Rolle des Benutzers"),
    )

    # Fill rolle from user_rolle names
    conn = op.get_bind()

    # Map back verwaltung
    conn.execute(
        sa.text(
            """
            UPDATE "user"
            SET rolle = 'Verwaltung'
            WHERE rolle_id IN (
                SELECT id FROM user_rolle WHERE name = 'Verwaltung'
            )
        """
        )
    )

    # Map back politik
    conn.execute(
        sa.text(
            """
            UPDATE "user"
            SET rolle = 'Politik'
            WHERE rolle_id IN (
                SELECT id FROM user_rolle WHERE name = 'Politik'
            )
        """
        )
    )

    # If rolle was originally non-nullable
    op.alter_column("user", "rolle", nullable=False)

    # Drop the foreign key & rolle_id column
    op.drop_constraint(None, "user", type_="foreignkey")
    op.drop_column("user", "rolle_id")

    # Drop user_rolle table
    op.drop_index(op.f("ix_user_rolle_id"), table_name="user_rolle")
    op.drop_table("user_rolle")
    # ### end Alembic commands ###
