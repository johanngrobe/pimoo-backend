"""rename variables

Revision ID: a4d72d610e5a
Revises: 9e801d1375c7
Create Date: 2025-07-03 14:41:43.186426

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "a4d72d610e5a"
down_revision: Union[str, None] = "9e801d1375c7"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Rename tables
    op.rename_table("municipality", "gemeinde")
    op.rename_table("indicator", "indikator")
    op.rename_table("climate_submission", "klimacheck_eingabe")
    op.rename_table("mobility_submission", "mobilitaetscheck_eingabe")
    op.rename_table("main_objective", "mobilitaetscheck_ziel_ober")
    op.rename_table("sub_objective", "mobilitaetscheck_ziel_unter")
    op.rename_table("text_block", "textblock")
    op.rename_table("indicator_tag", "indikator_tag")
    op.rename_table("text_block_tag", "textblock_tag")
    op.rename_table("mobility_result", "mobilitaetscheck_eingabe_ziel_ober")
    op.rename_table("mobility_subresult", "mobilitaetscheck_eingabe_ziel_unter")
    op.rename_table("mobility_result_indicators", "mobilitaetscheckEingabe_indikator")

    # Rename columns in user table
    op.alter_column("user", "first_name", new_column_name="vorname")
    op.alter_column("user", "last_name", new_column_name="nachname")
    op.alter_column("user", "role", new_column_name="rolle")
    # Change type from ENUM to VARCHAR
    op.execute('ALTER TABLE "user" ALTER COLUMN rolle TYPE VARCHAR USING rolle::text')
    # Optionally drop old ENUM type if not used anywhere else
    op.execute("DROP TYPE IF EXISTS roleenum")
    op.alter_column("user", "created_at", new_column_name="erstellt_am")
    op.alter_column("user", "municipality_id", new_column_name="gemeinde_id")

    # Rename columns in tag table
    op.alter_column("tag", "label", new_column_name="name")
    op.alter_column("tag", "municipality_id", new_column_name="gemeinde_id")
    op.alter_column("tag", "created_by", new_column_name="erstellt_von")
    op.alter_column("tag", "last_edited_by", new_column_name="zuletzt_bearbeitet_von")

    # Rename columns in "textblock"
    op.alter_column("textblock", "label", new_column_name="name")
    op.alter_column("textblock", "municipality_id", new_column_name="gemeinde_id")
    op.alter_column("textblock", "created_by", new_column_name="erstellt_von")
    op.alter_column(
        "textblock", "last_edited_by", new_column_name="zuletzt_bearbeitet_von"
    )

    # Rename columns in "indikator"
    op.alter_column("indikator", "label", new_column_name="name")
    op.alter_column("indikator", "municipality_id", new_column_name="gemeinde_id")
    op.alter_column("indikator", "source_url", new_column_name="quelle_url")
    op.alter_column("indikator", "created_by", new_column_name="erstellt_von")
    op.alter_column(
        "indikator", "last_edited_by", new_column_name="zuletzt_bearbeitet_von"
    )
    # Rename columns in "klimacheck_eingabe"
    op.alter_column(
        "klimacheck_eingabe",
        "administration_no",
        new_column_name="verwaltungsvorgang_nr",
    )
    op.alter_column(
        "klimacheck_eingabe",
        "administration_date",
        new_column_name="verwaltungsvorgang_datum",
    )
    op.alter_column("klimacheck_eingabe", "label", new_column_name="name")
    op.alter_column("klimacheck_eingabe", "impact", new_column_name="klimarelevanz")
    op.alter_column(
        "klimacheck_eingabe", "impact_ghg", new_column_name="auswirkung_thg"
    )
    op.alter_column(
        "klimacheck_eingabe",
        "impact_adaption",
        new_column_name="auswirkung_klimaanpassung",
    )
    op.alter_column(
        "klimacheck_eingabe", "impact_desc", new_column_name="auswirkung_beschreibung"
    )
    op.alter_column(
        "klimacheck_eingabe", "impact_duration", new_column_name="auswirkung_dauer"
    )
    op.alter_column(
        "klimacheck_eingabe", "alternative_desc", new_column_name="alternativen"
    )
    op.alter_column("klimacheck_eingabe", "created_at", new_column_name="erstellt_am")
    op.alter_column(
        "klimacheck_eingabe", "municipality_id", new_column_name="gemeinde_id"
    )
    op.alter_column("klimacheck_eingabe", "created_by", new_column_name="erstellt_von")
    op.alter_column(
        "klimacheck_eingabe", "last_edited_by", new_column_name="zuletzt_bearbeiter_von"
    )
    op.alter_column(
        "klimacheck_eingabe", "is_published", new_column_name="veroeffentlicht"
    )

    # Similarly rename all columns for mobilitaetscheck_* tables
    op.alter_column(
        "mobilitaetscheck_eingabe",
        "administration_no",
        new_column_name="verwaltungsvorgang_nr",
    )
    op.alter_column(
        "mobilitaetscheck_eingabe",
        "administration_date",
        new_column_name="verwaltungsvorgang_datum",
    )
    op.alter_column("mobilitaetscheck_eingabe", "label", new_column_name="name")
    op.alter_column("mobilitaetscheck_eingabe", "desc", new_column_name="beschreibung")
    op.alter_column(
        "mobilitaetscheck_eingabe", "created_at", new_column_name="erstellt_am"
    )
    op.alter_column(
        "mobilitaetscheck_eingabe", "municipality_id", new_column_name="gemeinde_id"
    )
    op.alter_column(
        "mobilitaetscheck_eingabe", "created_by", new_column_name="erstellt_von"
    )
    op.alter_column(
        "mobilitaetscheck_eingabe",
        "last_edited_by",
        new_column_name="zuletzt_bearbeitet_von",
    )
    op.alter_column(
        "mobilitaetscheck_eingabe", "is_published", new_column_name="veroeffentlicht"
    )

    op.alter_column("mobilitaetscheck_ziel_ober", "no", new_column_name="nr")
    op.alter_column("mobilitaetscheck_ziel_ober", "label", new_column_name="name")
    op.alter_column(
        "mobilitaetscheck_ziel_ober", "municipality_id", new_column_name="gemeinde_id"
    )
    op.alter_column(
        "mobilitaetscheck_ziel_ober", "created_by", new_column_name="erstellt_von"
    )
    op.alter_column(
        "mobilitaetscheck_ziel_ober",
        "last_edited_by",
        new_column_name="zuletzt_bearbeitet_von",
    )

    op.alter_column("mobilitaetscheck_ziel_unter", "no", new_column_name="nr")
    op.alter_column("mobilitaetscheck_ziel_unter", "label", new_column_name="name")
    op.alter_column(
        "mobilitaetscheck_ziel_unter",
        "main_objective_id",
        new_column_name="ziel_ober_id",
    )
    op.alter_column(
        "mobilitaetscheck_ziel_unter", "municipality_id", new_column_name="gemeinde_id"
    )
    op.alter_column(
        "mobilitaetscheck_ziel_unter", "created_by", new_column_name="erstellt_von"
    )
    op.alter_column(
        "mobilitaetscheck_ziel_unter",
        "last_edited_by",
        new_column_name="zuletzt_bearbeitet_von",
    )

    # For mobilitaetscheck_eingabe_ziel_ober
    op.alter_column(
        "mobilitaetscheck_eingabe_ziel_ober",
        "submission_id",
        new_column_name="mobilitaetscheck_eingabe_id",
    )
    op.alter_column(
        "mobilitaetscheck_eingabe_ziel_ober",
        "main_objective_id",
        new_column_name="mobilitaetscheck_ziel_ober_id",
    )
    op.alter_column(
        "mobilitaetscheck_eingabe_ziel_ober", "target", new_column_name="tangiert"
    )

    # For mobilitaetscheck_eingabe_ziel_unter
    op.alter_column(
        "mobilitaetscheck_eingabe_ziel_unter",
        "mobility_result_id",
        new_column_name="eingabe_ziel_ober_id",
    )
    op.alter_column(
        "mobilitaetscheck_eingabe_ziel_unter",
        "sub_objective_id",
        new_column_name="ziel_unter_id",
    )
    op.alter_column(
        "mobilitaetscheck_eingabe_ziel_unter", "target", new_column_name="tangiert"
    )
    op.alter_column(
        "mobilitaetscheck_eingabe_ziel_unter", "impact", new_column_name="auswirkung"
    )
    op.alter_column(
        "mobilitaetscheck_eingabe_ziel_unter",
        "spatial_impact",
        new_column_name="auswirkung_raeumlich",
    )
    op.alter_column(
        "mobilitaetscheck_eingabe_ziel_unter", "annotation", new_column_name="anmerkung"
    )

    # For mobilitaetscheckEingabe_indikator
    op.alter_column(
        "mobilitaetscheckEingabe_indikator",
        "indicator_id",
        new_column_name="indikator_id",
    )
    op.alter_column(
        "mobilitaetscheckEingabe_indikator",
        "mobility_subresult_id",
        new_column_name="mobilitaetscheck_eingabe_ziel_unter_id",
    )

    # For indikator_tag
    op.alter_column("indikator_tag", "indicator_id", new_column_name="indikator_id")

    # For textblock_tag
    op.alter_column("textblock_tag", "text_block_id", new_column_name="textblock_id")

    # Rename indexes
    op.execute("ALTER INDEX ix_municipality_id RENAME TO ix_gemeinde_id")
    op.execute("ALTER INDEX ix_indicator_id RENAME TO ix_indikator_id")
    op.execute(
        "ALTER INDEX ix_climate_submission_id RENAME TO ix_klimacheck_eingabe_id"
    )
    op.execute(
        "ALTER INDEX ix_mobility_submission_id RENAME TO ix_mobilitaetscheck_eingabe_id"
    )
    op.execute(
        "ALTER INDEX ix_main_objective_id RENAME TO ix_mobilitaetscheck_ziel_ober_id"
    )
    op.execute(
        "ALTER INDEX ix_sub_objective_id RENAME TO ix_mobilitaetscheck_ziel_unter_id"
    )
    op.execute(
        "ALTER INDEX ix_mobility_result_id RENAME TO ix_mobilitaetscheck_eingabe_ziel_ober_id"
    )
    op.execute(
        "ALTER INDEX ix_mobility_subresult_id RENAME TO ix_mobilitaetscheck_eingabe_ziel_unter_id"
    )
    op.execute("ALTER INDEX ix_text_block_id RENAME TO ix_textblock_id")

    # Drop and recreate FKs to reflect new table and column names
    op.drop_constraint("tag_municipality_id_fkey", "tag", type_="foreignkey")
    op.drop_constraint("tag_created_by_fkey", "tag", type_="foreignkey")
    op.drop_constraint("tag_last_edited_by_fkey", "tag", type_="foreignkey")
    op.create_foreign_key(
        None, "tag", "gemeinde", ["gemeinde_id"], ["id"], ondelete="CASCADE"
    )
    op.create_foreign_key(
        None, "tag", "user", ["erstellt_von"], ["id"], ondelete="SET NULL"
    )
    op.create_foreign_key(
        None, "tag", "user", ["zuletzt_bearbeitet_von"], ["id"], ondelete="SET NULL"
    )

    op.drop_constraint(
        "indicator_municipality_id_fkey", "indikator", type_="foreignkey"
    )
    op.drop_constraint("indicator_created_by_fkey", "indikator", type_="foreignkey")
    op.drop_constraint("indicator_last_edited_by_fkey", "indikator", type_="foreignkey")
    op.create_foreign_key(
        None, "indikator", "gemeinde", ["gemeinde_id"], ["id"], ondelete="CASCADE"
    )
    op.create_foreign_key(
        None, "indikator", "user", ["erstellt_von"], ["id"], ondelete="SET NULL"
    )
    op.create_foreign_key(
        None,
        "indikator",
        "user",
        ["zuletzt_bearbeitet_von"],
        ["id"],
        ondelete="SET NULL",
    )

    op.drop_constraint(
        "text_block_municipality_id_fkey", "textblock", type_="foreignkey"
    )
    op.drop_constraint("text_block_created_by_fkey", "textblock", type_="foreignkey")
    op.drop_constraint(
        "text_block_last_edited_by_fkey", "textblock", type_="foreignkey"
    )
    op.create_foreign_key(
        None, "textblock", "gemeinde", ["gemeinde_id"], ["id"], ondelete="CASCADE"
    )
    op.create_foreign_key(
        None, "textblock", "user", ["erstellt_von"], ["id"], ondelete="SET NULL"
    )
    op.create_foreign_key(
        None,
        "textblock",
        "user",
        ["zuletzt_bearbeitet_von"],
        ["id"],
        ondelete="SET NULL",
    )

    op.drop_constraint(
        "climate_submission_municipality_id_fkey",
        "klimacheck_eingabe",
        type_="foreignkey",
    )
    op.drop_constraint(
        "climate_submission_created_by_fkey", "klimacheck_eingabe", type_="foreignkey"
    )
    op.drop_constraint(
        "climate_submission_last_edited_by_fkey",
        "klimacheck_eingabe",
        type_="foreignkey",
    )
    op.create_foreign_key(
        None,
        "klimacheck_eingabe",
        "gemeinde",
        ["gemeinde_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.create_foreign_key(
        None,
        "klimacheck_eingabe",
        "user",
        ["erstellt_von"],
        ["id"],
        ondelete="SET NULL",
    )
    op.create_foreign_key(
        None,
        "klimacheck_eingabe",
        "user",
        ["zuletzt_bearbeiter_von"],
        ["id"],
        ondelete="SET NULL",
    )

    op.drop_constraint(
        "mobility_submission_municipality_id_fkey",
        "mobilitaetscheck_eingabe",
        type_="foreignkey",
    )
    op.drop_constraint(
        "mobility_submission_created_by_fkey",
        "mobilitaetscheck_eingabe",
        type_="foreignkey",
    )
    op.drop_constraint(
        "mobility_submission_last_edited_by_fkey",
        "mobilitaetscheck_eingabe",
        type_="foreignkey",
    )
    op.create_foreign_key(
        None,
        "mobilitaetscheck_eingabe",
        "gemeinde",
        ["gemeinde_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.create_foreign_key(
        None,
        "mobilitaetscheck_eingabe",
        "user",
        ["erstellt_von"],
        ["id"],
        ondelete="SET NULL",
    )
    op.create_foreign_key(
        None,
        "mobilitaetscheck_eingabe",
        "user",
        ["zuletzt_bearbeitet_von"],
        ["id"],
        ondelete="SET NULL",
    )

    op.drop_constraint(
        "main_objective_municipality_id_fkey",
        "mobilitaetscheck_ziel_ober",
        type_="foreignkey",
    )
    op.drop_constraint(
        "main_objective_created_by_fkey",
        "mobilitaetscheck_ziel_ober",
        type_="foreignkey",
    )
    op.drop_constraint(
        "main_objective_last_edited_by_fkey",
        "mobilitaetscheck_ziel_ober",
        type_="foreignkey",
    )
    op.create_foreign_key(
        None,
        "mobilitaetscheck_ziel_ober",
        "gemeinde",
        ["gemeinde_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.create_foreign_key(
        None,
        "mobilitaetscheck_ziel_ober",
        "user",
        ["erstellt_von"],
        ["id"],
        ondelete="SET NULL",
    )
    op.create_foreign_key(
        None,
        "mobilitaetscheck_ziel_ober",
        "user",
        ["zuletzt_bearbeitet_von"],
        ["id"],
        ondelete="SET NULL",
    )

    op.drop_constraint(
        "sub_objective_main_objective_id_fkey",
        "mobilitaetscheck_ziel_unter",
        type_="foreignkey",
    )
    op.drop_constraint(
        "sub_objective_municipality_id_fkey",
        "mobilitaetscheck_ziel_unter",
        type_="foreignkey",
    )
    op.drop_constraint(
        "sub_objective_created_by_fkey",
        "mobilitaetscheck_ziel_unter",
        type_="foreignkey",
    )
    op.drop_constraint(
        "sub_objective_last_edited_by_fkey",
        "mobilitaetscheck_ziel_unter",
        type_="foreignkey",
    )
    op.create_foreign_key(
        None,
        "mobilitaetscheck_ziel_unter",
        "mobilitaetscheck_ziel_ober",
        ["ziel_ober_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.create_foreign_key(
        None,
        "mobilitaetscheck_ziel_unter",
        "gemeinde",
        ["gemeinde_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.create_foreign_key(
        None,
        "mobilitaetscheck_ziel_unter",
        "user",
        ["erstellt_von"],
        ["id"],
        ondelete="SET NULL",
    )
    op.create_foreign_key(
        None,
        "mobilitaetscheck_ziel_unter",
        "user",
        ["zuletzt_bearbeitet_von"],
        ["id"],
        ondelete="SET NULL",
    )

    op.drop_constraint(
        "mobility_result_submission_id_fkey",
        "mobilitaetscheck_eingabe_ziel_ober",
        type_="foreignkey",
    )
    op.drop_constraint(
        "mobility_result_main_objective_id_fkey",
        "mobilitaetscheck_eingabe_ziel_ober",
        type_="foreignkey",
    )
    op.create_foreign_key(
        None,
        "mobilitaetscheck_eingabe_ziel_ober",
        "mobilitaetscheck_eingabe",
        ["mobilitaetscheck_eingabe_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.create_foreign_key(
        None,
        "mobilitaetscheck_eingabe_ziel_ober",
        "mobilitaetscheck_ziel_ober",
        ["mobilitaetscheck_ziel_ober_id"],
        ["id"],
    )

    op.drop_constraint(
        "mobility_subresult_mobility_result_id_fkey",
        "mobilitaetscheck_eingabe_ziel_unter",
        type_="foreignkey",
    )
    op.drop_constraint(
        "mobility_subresult_sub_objective_id_fkey",
        "mobilitaetscheck_eingabe_ziel_unter",
        type_="foreignkey",
    )
    op.create_foreign_key(
        None,
        "mobilitaetscheck_eingabe_ziel_unter",
        "mobilitaetscheck_eingabe_ziel_ober",
        ["eingabe_ziel_ober_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.create_foreign_key(
        None,
        "mobilitaetscheck_eingabe_ziel_unter",
        "mobilitaetscheck_ziel_unter",
        ["ziel_unter_id"],
        ["id"],
        ondelete="CASCADE",
    )

    op.drop_constraint(
        "mobility_result_indicators_indicator_id_fkey",
        "mobilitaetscheckEingabe_indikator",
        type_="foreignkey",
    )
    op.drop_constraint(
        "mobility_result_indicators_mobility_subresult_id_fkey",
        "mobilitaetscheckEingabe_indikator",
        type_="foreignkey",
    )
    op.create_foreign_key(
        None,
        "mobilitaetscheckEingabe_indikator",
        "indikator",
        ["indikator_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.create_foreign_key(
        None,
        "mobilitaetscheckEingabe_indikator",
        "mobilitaetscheck_eingabe_ziel_unter",
        ["mobilitaetscheck_eingabe_ziel_unter_id"],
        ["id"],
        ondelete="CASCADE",
    )

    op.drop_constraint(
        "indicator_tag_indicator_id_fkey", "indikator_tag", type_="foreignkey"
    )
    op.create_foreign_key(
        None, "indikator_tag", "indikator", ["indikator_id"], ["id"], ondelete="CASCADE"
    )
    op.create_foreign_key(
        None, "indikator_tag", "tag", ["tag_id"], ["id"], ondelete="CASCADE"
    )

    op.drop_constraint(
        "text_block_tag_text_block_id_fkey", "textblock_tag", type_="foreignkey"
    )
    op.create_foreign_key(
        None, "textblock_tag", "textblock", ["textblock_id"], ["id"], ondelete="CASCADE"
    )
    op.create_foreign_key(
        None, "textblock_tag", "tag", ["tag_id"], ["id"], ondelete="CASCADE"
    )

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    raise NotImplementedError("Downgrade is not supported for rename migration.")
    # ### end Alembic commands ###
