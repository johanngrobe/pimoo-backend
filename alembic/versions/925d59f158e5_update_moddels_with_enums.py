"""update moddels with enums

Revision ID: 925d59f158e5
Revises: 5ca630c1224c
Create Date: 2024-11-08 15:33:20.961789

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "925d59f158e5"
down_revision: Union[str, None] = "5ca630c1224c"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    impact_enum = postgresql.ENUM(
        "positive", "negative", "no_effect", name="impactenum"
    )
    impact_enum.create(op.get_bind())

    impact_duration_enum = postgresql.ENUM(
        "short", "medium", "long", name="impactdurationenum"
    )
    impact_duration_enum.create(op.get_bind())

    spatial_impact_enum = postgresql.ENUM(
        "locally", "districtwide", "citywide", name="spatialimpactenum"
    )
    spatial_impact_enum.create(op.get_bind())

    role_enum = postgresql.ENUM("administration", "politician", name="roleenum")
    role_enum.create(op.get_bind())

    # Now proceed with altering columns to use the enums, specifying USING to cast existing data
    op.execute(
        "ALTER TABLE climate_submission ALTER COLUMN impact TYPE impactenum USING impact::impactenum"
    )
    op.execute(
        "ALTER TABLE climate_submission ALTER COLUMN impact_duration TYPE impactdurationenum USING impact_duration::impactdurationenum"
    )
    op.execute(
        "ALTER TABLE mobility_subresult ALTER COLUMN spatial_impact TYPE spatialimpactenum USING spatial_impact::spatialimpactenum"
    )
    op.execute(
        'ALTER TABLE "user" ALTER COLUMN role TYPE roleenum USING role::roleenum'
    )

    op.alter_column(
        "climate_submission",
        "id",
        existing_type=sa.INTEGER(),
        comment="Submission ID",
        existing_nullable=False,
        autoincrement=True,
    )
    op.alter_column(
        "climate_submission",
        "administration_no",
        existing_type=sa.VARCHAR(),
        comment="Internal tracking number assigned by the administration.",
        existing_nullable=False,
    )
    op.alter_column(
        "climate_submission",
        "administration_date",
        existing_type=sa.DATE(),
        comment="Date the submission was registered by the administration.",
        existing_nullable=False,
    )
    op.alter_column(
        "climate_submission",
        "label",
        existing_type=sa.VARCHAR(),
        comment="Short descriptive title or label for the submission.",
        existing_nullable=False,
    )
    op.alter_column(
        "climate_submission",
        "impact",
        existing_type=sa.VARCHAR(length=9),
        type_=sa.Enum("positive", "negative", "no_effect", name="impactenum"),
        comment="Estimated impact on climate (e.g., positive, negative, no effect).",
        existing_nullable=False,
    )
    op.alter_column(
        "climate_submission",
        "impact_ghg",
        existing_type=sa.INTEGER(),
        comment="Estimated impact on greenhouse gas emissions on a scale from -3 to 3.",
        existing_nullable=True,
    )
    op.alter_column(
        "climate_submission",
        "impact_adaption",
        existing_type=sa.INTEGER(),
        comment="Estimated impact on climate adaptation on a scale from -3 to 3.",
        existing_nullable=True,
    )
    op.alter_column(
        "climate_submission",
        "impact_desc",
        existing_type=sa.VARCHAR(),
        comment="Detailed description of the estimated impact on climate.",
        existing_nullable=True,
    )
    op.alter_column(
        "climate_submission",
        "impact_duration",
        existing_type=sa.VARCHAR(length=6),
        type_=sa.Enum("short", "medium", "long", name="impactdurationenum"),
        comment="Estimated duration of the impact (e.g., short, medium, long).",
        existing_nullable=True,
    )
    op.alter_column(
        "climate_submission",
        "alternative_desc",
        existing_type=sa.VARCHAR(),
        comment="Description of alternative solutions or adaptations.",
        existing_nullable=True,
    )
    op.alter_column(
        "climate_submission",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        comment="Date and time the submission was created.",
        existing_nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "climate_submission",
        "municipality_id",
        existing_type=sa.INTEGER(),
        comment="ID of the municipality that submitted the project.",
        existing_nullable=False,
    )
    op.alter_column(
        "climate_submission",
        "created_by",
        existing_type=sa.UUID(),
        comment="ID of the user who created the submission.",
        existing_nullable=True,
    )
    op.alter_column(
        "climate_submission",
        "last_edited_by",
        existing_type=sa.UUID(),
        comment="ID of the user who last edited the submission.",
        existing_nullable=True,
    )
    op.alter_column(
        "climate_submission",
        "is_published",
        existing_type=sa.BOOLEAN(),
        comment="Flag indicating whether the submission is published.",
        existing_nullable=False,
    )
    op.alter_column(
        "indicator",
        "id",
        existing_type=sa.INTEGER(),
        comment="Indicator ID",
        existing_nullable=False,
        autoincrement=True,
    )
    op.alter_column(
        "indicator",
        "label",
        existing_type=sa.VARCHAR(),
        comment="Label or name of the indicator.",
        existing_nullable=False,
    )
    op.alter_column(
        "indicator",
        "source_url",
        existing_type=sa.VARCHAR(),
        comment="URL to the source of the indicator.",
        existing_nullable=True,
    )
    op.alter_column(
        "indicator",
        "municipality_id",
        existing_type=sa.INTEGER(),
        comment="Municipality ID by which the indicator is associated.",
        existing_nullable=False,
    )
    op.alter_column(
        "indicator",
        "created_by",
        existing_type=sa.UUID(),
        comment="User ID of the creator of the indicator.",
        existing_nullable=True,
    )
    op.alter_column(
        "indicator",
        "last_edited_by",
        existing_type=sa.UUID(),
        comment="User ID of the last editor.",
        existing_nullable=True,
    )
    op.drop_column("indicator", "source")
    op.alter_column(
        "main_objective",
        "id",
        existing_type=sa.INTEGER(),
        comment="Main objective ID",
        existing_nullable=False,
        autoincrement=True,
    )
    op.alter_column(
        "main_objective",
        "no",
        existing_type=sa.INTEGER(),
        comment="Main objective number",
        existing_nullable=False,
    )
    op.alter_column(
        "main_objective",
        "label",
        existing_type=sa.VARCHAR(),
        comment="Lable or name of Main objective",
        existing_nullable=False,
    )
    op.alter_column(
        "main_objective",
        "municipality_id",
        existing_type=sa.INTEGER(),
        comment="Municipality ID by which the main objective is associated.",
        existing_nullable=False,
    )
    op.alter_column(
        "main_objective",
        "created_by",
        existing_type=sa.UUID(),
        comment="User ID of the creator of the main objective.",
        existing_nullable=True,
    )
    op.alter_column(
        "main_objective",
        "last_edited_by",
        existing_type=sa.UUID(),
        comment="User ID of the last editor.",
        existing_nullable=True,
    )
    op.alter_column(
        "mobility_result",
        "id",
        existing_type=sa.INTEGER(),
        comment="Mobility result ID",
        existing_nullable=False,
        autoincrement=True,
    )
    op.alter_column(
        "mobility_result",
        "submission_id",
        existing_type=sa.INTEGER(),
        comment="Submission ID by which the mobility result is associated.",
        existing_nullable=False,
    )
    op.alter_column(
        "mobility_result",
        "main_objective_id",
        existing_type=sa.INTEGER(),
        comment="Main objective ID by which the mobility result is associated",
        existing_nullable=False,
    )
    op.alter_column(
        "mobility_result",
        "target",
        existing_type=sa.BOOLEAN(),
        comment="Main Objective is targeted or not",
        existing_nullable=False,
    )
    op.alter_column(
        "mobility_submission",
        "id",
        existing_type=sa.INTEGER(),
        comment="Mobility Submission ID",
        existing_nullable=False,
        autoincrement=True,
        existing_server_default=sa.text(
            "nextval('mobility_submission_id_seq'::regclass)"
        ),
    )
    op.alter_column(
        "mobility_submission",
        "administration_no",
        existing_type=sa.VARCHAR(),
        comment="Internal tracking number assigned by the administration.",
        existing_nullable=False,
    )
    op.alter_column(
        "mobility_submission",
        "administration_date",
        existing_type=sa.DATE(),
        comment="Date the submission was registered by the administration.",
        existing_nullable=False,
    )
    op.alter_column(
        "mobility_submission",
        "label",
        existing_type=sa.VARCHAR(),
        comment="Short descriptive title or label for the submission.",
        existing_nullable=False,
    )
    op.alter_column(
        "mobility_submission",
        "desc",
        existing_type=sa.VARCHAR(),
        comment="Description of the submission.",
        existing_nullable=False,
    )
    op.alter_column(
        "mobility_submission",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        comment="Date of creation.",
        existing_nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "mobility_submission",
        "municipality_id",
        existing_type=sa.INTEGER(),
        comment="Municipality ID by which the mobility submission is associated.",
        existing_nullable=False,
    )
    op.alter_column(
        "mobility_submission",
        "created_by",
        existing_type=sa.UUID(),
        comment="User ID of the creator of the mobility submission.",
        existing_nullable=True,
    )
    op.alter_column(
        "mobility_submission",
        "last_edited_by",
        existing_type=sa.UUID(),
        comment="User ID of the last editor.",
        existing_nullable=True,
    )
    op.alter_column(
        "mobility_submission",
        "is_published",
        existing_type=sa.BOOLEAN(),
        comment="Is the submission published or not",
        existing_nullable=False,
    )
    op.alter_column(
        "mobility_subresult",
        "id",
        existing_type=sa.INTEGER(),
        comment="Mobility Subresult ID",
        existing_nullable=False,
        autoincrement=True,
    )
    op.alter_column(
        "mobility_subresult",
        "mobility_result_id",
        existing_type=sa.INTEGER(),
        comment="Associated Mobility Result ID",
        existing_nullable=False,
    )
    op.alter_column(
        "mobility_subresult",
        "sub_objective_id",
        existing_type=sa.INTEGER(),
        comment="Sub Objective ID by which the mobility subresult is associated",
        existing_nullable=False,
    )
    op.alter_column(
        "mobility_subresult",
        "target",
        existing_type=sa.BOOLEAN(),
        comment="Sub Objective is targeted or not",
        existing_nullable=False,
    )
    op.alter_column(
        "mobility_subresult",
        "impact",
        existing_type=sa.INTEGER(),
        comment="Impact on the sub objective on a scale from -3 to 3",
        existing_nullable=True,
    )
    op.alter_column(
        "mobility_subresult",
        "spatial_impact",
        existing_type=sa.VARCHAR(length=12),
        type_=sa.Enum("locally", "districtwide", "citywide", name="spatialimpactenum"),
        comment="Spatial impact of the sub objective (e.g. locally, districtwide, citywide)",
        existing_nullable=True,
    )
    op.alter_column(
        "mobility_subresult",
        "annotation",
        existing_type=sa.VARCHAR(),
        comment="Annotation for the sub objective",
        existing_nullable=True,
    )
    op.alter_column(
        "municipality",
        "id",
        existing_type=sa.INTEGER(),
        comment="Municipality ID",
        existing_nullable=False,
        autoincrement=True,
        existing_server_default=sa.text("nextval('municipality_id_seq'::regclass)"),
    )
    op.alter_column(
        "municipality",
        "name",
        existing_type=sa.VARCHAR(),
        comment="Name of the municipality.",
        existing_nullable=False,
    )
    op.alter_column(
        "sub_objective",
        "id",
        existing_type=sa.INTEGER(),
        comment="Sub objective ID",
        existing_nullable=False,
        autoincrement=True,
        existing_server_default=sa.text("nextval('sub_target_id_seq'::regclass)"),
    )
    op.alter_column(
        "sub_objective",
        "no",
        existing_type=sa.INTEGER(),
        comment="Sub objective number",
        existing_nullable=False,
    )
    op.alter_column(
        "sub_objective",
        "label",
        existing_type=sa.VARCHAR(),
        comment="Label or name of sub objective",
        existing_nullable=False,
    )
    op.alter_column(
        "sub_objective",
        "main_objective_id",
        existing_type=sa.INTEGER(),
        comment="Main objective ID associated with the sub objective",
        existing_nullable=False,
    )
    op.alter_column(
        "sub_objective",
        "municipality_id",
        existing_type=sa.INTEGER(),
        comment="Municipality ID by which the sub objective is associated.",
        existing_nullable=False,
    )
    op.alter_column(
        "sub_objective",
        "created_by",
        existing_type=sa.UUID(),
        comment="User ID of the creator of the sub objective.",
        existing_nullable=True,
    )
    op.alter_column(
        "sub_objective",
        "last_edited_by",
        existing_type=sa.UUID(),
        comment="User ID of the last editor.",
        existing_nullable=True,
    )
    op.alter_column(
        "tag",
        "id",
        existing_type=sa.INTEGER(),
        comment="Tag ID",
        existing_nullable=False,
        autoincrement=True,
        existing_server_default=sa.text("nextval('tag_id_seq'::regclass)"),
    )
    op.alter_column(
        "tag",
        "label",
        existing_type=sa.VARCHAR(),
        comment="Label or name of the tag",
        existing_nullable=False,
    )
    op.alter_column(
        "tag",
        "municipality_id",
        existing_type=sa.INTEGER(),
        comment="Municipality ID by which the tag is associated.",
        existing_nullable=False,
    )
    op.alter_column(
        "tag",
        "created_by",
        existing_type=sa.UUID(),
        comment="User ID of the creator of the tag.",
        existing_nullable=True,
    )
    op.alter_column(
        "tag",
        "last_edited_by",
        existing_type=sa.UUID(),
        comment="User ID of the last editor.",
        existing_nullable=True,
    )
    op.alter_column(
        "text_block",
        "id",
        existing_type=sa.INTEGER(),
        comment="Text block ID",
        existing_nullable=False,
        autoincrement=True,
        existing_server_default=sa.text("nextval('text_block_id_seq'::regclass)"),
    )
    op.alter_column(
        "text_block",
        "label",
        existing_type=sa.VARCHAR(),
        comment="Label or name of the text block.",
        existing_nullable=False,
    )
    op.alter_column(
        "text_block",
        "municipality_id",
        existing_type=sa.INTEGER(),
        comment="Municipality ID by which the text block is associated.",
        existing_nullable=False,
    )
    op.alter_column(
        "text_block",
        "created_by",
        existing_type=sa.UUID(),
        comment="User ID of the creator of the text block.",
        existing_nullable=True,
    )
    op.alter_column(
        "text_block",
        "last_edited_by",
        existing_type=sa.UUID(),
        comment="User ID of the last editor.",
        existing_nullable=True,
    )
    op.alter_column(
        "user",
        "first_name",
        existing_type=sa.VARCHAR(),
        comment="First name of the user.",
        existing_nullable=False,
    )
    op.alter_column(
        "user",
        "last_name",
        existing_type=sa.VARCHAR(),
        comment="Last name of the user.",
        existing_nullable=False,
    )
    op.alter_column(
        "user",
        "role",
        existing_type=sa.VARCHAR(),
        type_=sa.Enum("administration", "politician", name="roleenum"),
        comment="Role of the user.",
        existing_nullable=False,
    )
    op.alter_column(
        "user",
        "municipality_id",
        existing_type=sa.INTEGER(),
        comment="Municipality ID by which the user is associated.",
        existing_nullable=False,
    )
    op.alter_column(
        "user",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        comment="Date of creation.",
        existing_nullable=False,
        existing_server_default=sa.text("now()"),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute('ALTER TABLE "user" ALTER COLUMN role TYPE VARCHAR USING role::text')
    op.execute(
        "ALTER TABLE mobility_subresult ALTER COLUMN spatial_impact TYPE VARCHAR(12) USING spatial_impact::text"
    )
    op.execute(
        "ALTER TABLE climate_submission ALTER COLUMN impact_duration TYPE VARCHAR(6) USING impact_duration::text"
    )
    op.execute(
        "ALTER TABLE climate_submission ALTER COLUMN impact TYPE VARCHAR(9) USING impact::text"
    )

    # Drop the enums on downgrade
    impact_enum = postgresql.ENUM(
        "positive", "negative", "no_effect", name="impactenum"
    )
    impact_enum.drop(op.get_bind(), checkfirst=False)

    impact_duration_enum = postgresql.ENUM(
        "short", "medium", "long", name="impactdurationenum"
    )
    impact_duration_enum.drop(op.get_bind(), checkfirst=False)

    spatial_impact_enum = postgresql.ENUM(
        "locally", "districtwide", "citywide", name="spatialimpactenum"
    )
    spatial_impact_enum.drop(op.get_bind(), checkfirst=False)

    role_enum = postgresql.ENUM("administration", "politician", name="roleenum")
    role_enum.drop(op.get_bind(), checkfirst=False)

    op.alter_column(
        "user",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        comment=None,
        existing_comment="Date of creation.",
        existing_nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "user",
        "municipality_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Municipality ID by which the user is associated.",
        existing_nullable=False,
    )
    op.alter_column(
        "user",
        "role",
        existing_type=sa.Enum("administration", "politician", name="roleenum"),
        type_=sa.VARCHAR(),
        comment=None,
        existing_comment="Role of the user.",
        existing_nullable=False,
    )
    op.alter_column(
        "user",
        "last_name",
        existing_type=sa.VARCHAR(),
        comment=None,
        existing_comment="Last name of the user.",
        existing_nullable=False,
    )
    op.alter_column(
        "user",
        "first_name",
        existing_type=sa.VARCHAR(),
        comment=None,
        existing_comment="First name of the user.",
        existing_nullable=False,
    )
    op.alter_column(
        "text_block",
        "last_edited_by",
        existing_type=sa.UUID(),
        comment=None,
        existing_comment="User ID of the last editor.",
        existing_nullable=True,
    )
    op.alter_column(
        "text_block",
        "created_by",
        existing_type=sa.UUID(),
        comment=None,
        existing_comment="User ID of the creator of the text block.",
        existing_nullable=True,
    )
    op.alter_column(
        "text_block",
        "municipality_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Municipality ID by which the text block is associated.",
        existing_nullable=False,
    )
    op.alter_column(
        "text_block",
        "label",
        existing_type=sa.VARCHAR(),
        comment=None,
        existing_comment="Label or name of the text block.",
        existing_nullable=False,
    )
    op.alter_column(
        "text_block",
        "id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Text block ID",
        existing_nullable=False,
        autoincrement=True,
        existing_server_default=sa.text("nextval('text_block_id_seq'::regclass)"),
    )
    op.alter_column(
        "tag",
        "last_edited_by",
        existing_type=sa.UUID(),
        comment=None,
        existing_comment="User ID of the last editor.",
        existing_nullable=True,
    )
    op.alter_column(
        "tag",
        "created_by",
        existing_type=sa.UUID(),
        comment=None,
        existing_comment="User ID of the creator of the tag.",
        existing_nullable=True,
    )
    op.alter_column(
        "tag",
        "municipality_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Municipality ID by which the tag is associated.",
        existing_nullable=False,
    )
    op.alter_column(
        "tag",
        "label",
        existing_type=sa.VARCHAR(),
        comment=None,
        existing_comment="Label or name of the tag",
        existing_nullable=False,
    )
    op.alter_column(
        "tag",
        "id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Tag ID",
        existing_nullable=False,
        autoincrement=True,
        existing_server_default=sa.text("nextval('tag_id_seq'::regclass)"),
    )
    op.alter_column(
        "sub_objective",
        "last_edited_by",
        existing_type=sa.UUID(),
        comment=None,
        existing_comment="User ID of the last editor.",
        existing_nullable=True,
    )
    op.alter_column(
        "sub_objective",
        "created_by",
        existing_type=sa.UUID(),
        comment=None,
        existing_comment="User ID of the creator of the sub objective.",
        existing_nullable=True,
    )
    op.alter_column(
        "sub_objective",
        "municipality_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Municipality ID by which the sub objective is associated.",
        existing_nullable=False,
    )
    op.alter_column(
        "sub_objective",
        "main_objective_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Main objective ID associated with the sub objective",
        existing_nullable=False,
    )
    op.alter_column(
        "sub_objective",
        "label",
        existing_type=sa.VARCHAR(),
        comment=None,
        existing_comment="Label or name of sub objective",
        existing_nullable=False,
    )
    op.alter_column(
        "sub_objective",
        "no",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Sub objective number",
        existing_nullable=False,
    )
    op.alter_column(
        "sub_objective",
        "id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Sub objective ID",
        existing_nullable=False,
        autoincrement=True,
        existing_server_default=sa.text("nextval('sub_target_id_seq'::regclass)"),
    )
    op.alter_column(
        "municipality",
        "name",
        existing_type=sa.VARCHAR(),
        comment=None,
        existing_comment="Name of the municipality.",
        existing_nullable=False,
    )
    op.alter_column(
        "municipality",
        "id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Municipality ID",
        existing_nullable=False,
        autoincrement=True,
        existing_server_default=sa.text("nextval('municipality_id_seq'::regclass)"),
    )
    op.alter_column(
        "mobility_subresult",
        "annotation",
        existing_type=sa.VARCHAR(),
        comment=None,
        existing_comment="Annotation for the sub objective",
        existing_nullable=True,
    )
    op.alter_column(
        "mobility_subresult",
        "spatial_impact",
        existing_type=sa.Enum(
            "locally", "districtwide", "citywide", name="spatialimpactenum"
        ),
        type_=sa.VARCHAR(length=12),
        comment=None,
        existing_comment="Spatial impact of the sub objective (e.g. locally, districtwide, citywide)",
        existing_nullable=True,
    )
    op.alter_column(
        "mobility_subresult",
        "impact",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Impact on the sub objective on a scale from -3 to 3",
        existing_nullable=True,
    )
    op.alter_column(
        "mobility_subresult",
        "target",
        existing_type=sa.BOOLEAN(),
        comment=None,
        existing_comment="Sub Objective is targeted or not",
        existing_nullable=False,
    )
    op.alter_column(
        "mobility_subresult",
        "sub_objective_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Sub Objective ID by which the mobility subresult is associated",
        existing_nullable=False,
    )
    op.alter_column(
        "mobility_subresult",
        "mobility_result_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Associated Mobility Result ID",
        existing_nullable=False,
    )
    op.alter_column(
        "mobility_subresult",
        "id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Mobility Subresult ID",
        existing_nullable=False,
        autoincrement=True,
    )
    op.alter_column(
        "mobility_submission",
        "is_published",
        existing_type=sa.BOOLEAN(),
        comment=None,
        existing_comment="Is the submission published or not",
        existing_nullable=False,
    )
    op.alter_column(
        "mobility_submission",
        "last_edited_by",
        existing_type=sa.UUID(),
        comment=None,
        existing_comment="User ID of the last editor.",
        existing_nullable=True,
    )
    op.alter_column(
        "mobility_submission",
        "created_by",
        existing_type=sa.UUID(),
        comment=None,
        existing_comment="User ID of the creator of the mobility submission.",
        existing_nullable=True,
    )
    op.alter_column(
        "mobility_submission",
        "municipality_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Municipality ID by which the mobility submission is associated.",
        existing_nullable=False,
    )
    op.alter_column(
        "mobility_submission",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        comment=None,
        existing_comment="Date of creation.",
        existing_nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "mobility_submission",
        "desc",
        existing_type=sa.VARCHAR(),
        comment=None,
        existing_comment="Description of the submission.",
        existing_nullable=False,
    )
    op.alter_column(
        "mobility_submission",
        "label",
        existing_type=sa.VARCHAR(),
        comment=None,
        existing_comment="Short descriptive title or label for the submission.",
        existing_nullable=False,
    )
    op.alter_column(
        "mobility_submission",
        "administration_date",
        existing_type=sa.DATE(),
        comment=None,
        existing_comment="Date the submission was registered by the administration.",
        existing_nullable=False,
    )
    op.alter_column(
        "mobility_submission",
        "administration_no",
        existing_type=sa.VARCHAR(),
        comment=None,
        existing_comment="Internal tracking number assigned by the administration.",
        existing_nullable=False,
    )
    op.alter_column(
        "mobility_submission",
        "id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Mobility Submission ID",
        existing_nullable=False,
        autoincrement=True,
        existing_server_default=sa.text(
            "nextval('mobility_submission_id_seq'::regclass)"
        ),
    )
    op.alter_column(
        "mobility_result",
        "target",
        existing_type=sa.BOOLEAN(),
        comment=None,
        existing_comment="Main Objective is targeted or not",
        existing_nullable=False,
    )
    op.alter_column(
        "mobility_result",
        "main_objective_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Main objective ID by which the mobility result is associated",
        existing_nullable=False,
    )
    op.alter_column(
        "mobility_result",
        "submission_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Submission ID by which the mobility result is associated.",
        existing_nullable=False,
    )
    op.alter_column(
        "mobility_result",
        "id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Mobility result ID",
        existing_nullable=False,
        autoincrement=True,
    )
    op.alter_column(
        "main_objective",
        "last_edited_by",
        existing_type=sa.UUID(),
        comment=None,
        existing_comment="User ID of the last editor.",
        existing_nullable=True,
    )
    op.alter_column(
        "main_objective",
        "created_by",
        existing_type=sa.UUID(),
        comment=None,
        existing_comment="User ID of the creator of the main objective.",
        existing_nullable=True,
    )
    op.alter_column(
        "main_objective",
        "municipality_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Municipality ID by which the main objective is associated.",
        existing_nullable=False,
    )
    op.alter_column(
        "main_objective",
        "label",
        existing_type=sa.VARCHAR(),
        comment=None,
        existing_comment="Lable or name of Main objective",
        existing_nullable=False,
    )
    op.alter_column(
        "main_objective",
        "no",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Main objective number",
        existing_nullable=False,
    )
    op.alter_column(
        "main_objective",
        "id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Main objective ID",
        existing_nullable=False,
        autoincrement=True,
    )
    op.add_column(
        "indicator",
        sa.Column("source", sa.VARCHAR(), autoincrement=False, nullable=True),
    )
    op.alter_column(
        "indicator",
        "last_edited_by",
        existing_type=sa.UUID(),
        comment=None,
        existing_comment="User ID of the last editor.",
        existing_nullable=True,
    )
    op.alter_column(
        "indicator",
        "created_by",
        existing_type=sa.UUID(),
        comment=None,
        existing_comment="User ID of the creator of the indicator.",
        existing_nullable=True,
    )
    op.alter_column(
        "indicator",
        "municipality_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Municipality ID by which the indicator is associated.",
        existing_nullable=False,
    )
    op.alter_column(
        "indicator",
        "source_url",
        existing_type=sa.VARCHAR(),
        comment=None,
        existing_comment="URL to the source of the indicator.",
        existing_nullable=True,
    )
    op.alter_column(
        "indicator",
        "label",
        existing_type=sa.VARCHAR(),
        comment=None,
        existing_comment="Label or name of the indicator.",
        existing_nullable=False,
    )
    op.alter_column(
        "indicator",
        "id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Indicator ID",
        existing_nullable=False,
        autoincrement=True,
    )
    op.alter_column(
        "climate_submission",
        "is_published",
        existing_type=sa.BOOLEAN(),
        comment=None,
        existing_comment="Flag indicating whether the submission is published.",
        existing_nullable=False,
    )
    op.alter_column(
        "climate_submission",
        "last_edited_by",
        existing_type=sa.UUID(),
        comment=None,
        existing_comment="ID of the user who last edited the submission.",
        existing_nullable=True,
    )
    op.alter_column(
        "climate_submission",
        "created_by",
        existing_type=sa.UUID(),
        comment=None,
        existing_comment="ID of the user who created the submission.",
        existing_nullable=True,
    )
    op.alter_column(
        "climate_submission",
        "municipality_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="ID of the municipality that submitted the project.",
        existing_nullable=False,
    )
    op.alter_column(
        "climate_submission",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        comment=None,
        existing_comment="Date and time the submission was created.",
        existing_nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "climate_submission",
        "alternative_desc",
        existing_type=sa.VARCHAR(),
        comment=None,
        existing_comment="Description of alternative solutions or adaptations.",
        existing_nullable=True,
    )
    op.alter_column(
        "climate_submission",
        "impact_duration",
        existing_type=sa.Enum("short", "medium", "long", name="impactdurationenum"),
        type_=sa.VARCHAR(length=6),
        comment=None,
        existing_comment="Estimated duration of the impact (e.g., short, medium, long).",
        existing_nullable=True,
    )
    op.alter_column(
        "climate_submission",
        "impact_desc",
        existing_type=sa.VARCHAR(),
        comment=None,
        existing_comment="Detailed description of the estimated impact on climate.",
        existing_nullable=True,
    )
    op.alter_column(
        "climate_submission",
        "impact_adaption",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Estimated impact on climate adaptation on a scale from -3 to 3.",
        existing_nullable=True,
    )
    op.alter_column(
        "climate_submission",
        "impact_ghg",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Estimated impact on greenhouse gas emissions on a scale from -3 to 3.",
        existing_nullable=True,
    )
    op.alter_column(
        "climate_submission",
        "impact",
        existing_type=sa.Enum("positive", "negative", "no_effect", name="impactenum"),
        type_=sa.VARCHAR(length=9),
        comment=None,
        existing_comment="Estimated impact on climate (e.g., positive, negative, no effect).",
        existing_nullable=False,
    )
    op.alter_column(
        "climate_submission",
        "label",
        existing_type=sa.VARCHAR(),
        comment=None,
        existing_comment="Short descriptive title or label for the submission.",
        existing_nullable=False,
    )
    op.alter_column(
        "climate_submission",
        "administration_date",
        existing_type=sa.DATE(),
        comment=None,
        existing_comment="Date the submission was registered by the administration.",
        existing_nullable=False,
    )
    op.alter_column(
        "climate_submission",
        "administration_no",
        existing_type=sa.VARCHAR(),
        comment=None,
        existing_comment="Internal tracking number assigned by the administration.",
        existing_nullable=False,
    )
    op.alter_column(
        "climate_submission",
        "id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Submission ID",
        existing_nullable=False,
        autoincrement=True,
    )
    # ### end Alembic commands ###
